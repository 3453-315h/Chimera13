//
//  amfidtakeover.swift
//  Chimera13
//
//  Created by CoolStar on 3/30/20.
//  Copyright Â© 2020 coolstar. All rights reserved.
//

import Foundation
import Darwin.POSIX.spawn

class AmfidTakeover {
    let offsets = Offsets.shared
    var sysdiagnose_pid: pid_t = 0
    var sysdiagnose_proc: UInt64 = 0
    var electra: Electra
    
    var our_entitlements: UInt64 = 0
    var sysdiagnose_entitlements: UInt64 = 0
    
    var has_entitlements = false
    
    init(electra: Electra) {
        self.electra = electra
    }
    
    public func grabEntitlements(our_proc: UInt64) -> Bool {
        guard !has_entitlements else {
            return false
        }
        
        var attrp: posix_spawnattr_t?
        posix_spawnattr_init(&attrp)
        posix_spawnattr_setflags(&attrp, Int16(POSIX_SPAWN_START_SUSPENDED))
        
        let args = ["sysdiagnose"]
        
        let argv: [UnsafeMutablePointer<CChar>?] = args.map { $0.withCString(strdup) }
        defer { for case let arg? in argv { free(arg) } }
        
        var pid: pid_t = 0
        let retVal = posix_spawn(&pid, "/usr/bin/sysdiagnose", nil, &attrp, argv + [nil], environ)
        if retVal < 0 {
            return false
        }
        
        self.sysdiagnose_pid = pid
        
        self.sysdiagnose_proc = electra.find_proc(pid: UInt32(pid))
        guard self.sysdiagnose_proc != 0 else {
            return false
        }
        
        let our_ucred = rk64(our_proc + offsets.proc.ucred)
        let sysdiagnose_ucred = rk64(sysdiagnose_proc + offsets.proc.ucred)
        
        our_entitlements = rk64(rk64(our_ucred + offsets.ucred.cr_label) + 0x8)
        sysdiagnose_entitlements = rk64(rk64(sysdiagnose_ucred + offsets.ucred.cr_label) + 0x8)
        
        wk64(rk64(our_ucred + offsets.ucred.cr_label) + 0x8, sysdiagnose_entitlements)
        
        has_entitlements = true
        return true
    }
    
    public func resetEntitlements(our_proc: UInt64) {
        guard has_entitlements else {
            return
        }
        
        has_entitlements = false
        let our_ucred = rk64(our_proc + offsets.proc.ucred)
        
        wk64(rk64(our_ucred + offsets.ucred.cr_label) + 0x8, our_entitlements)
        kill(sysdiagnose_pid, SIGKILL)
    }
    
    public func takeoverAmfid(amfid_pid: UInt32) {
        guard has_entitlements else {
            return
        }
        
        var amfid_task_port: mach_port_t = mach_port_t()
        let retVal = task_for_pid(mach_task_self_, Int32(amfid_pid), &amfid_task_port)
        guard retVal == 0 else {
            print("Unable to get amfid task :/")
            return
        }
        
        print("Got amfid task port: ", amfid_task_port)
        amfid_takeover(amfid_task_port)
        
        let patchOffset = parseMacho(path: "/usr/libexec/amfid", symbol: "_MISValidateSignatureAndCopyInfo")
        print(String(format: "Found patch offset: 0x%x", patchOffset))
    }
}
