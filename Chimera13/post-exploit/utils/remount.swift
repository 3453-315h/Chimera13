//
//  remount.swift
//  Chimera13
//
//  Created by CoolStar on 3/1/20.
//  Copyright Â© 2020 coolstar. All rights reserved.
//

import Foundation

public class Remount {
    private let offsets = Offsets.shared
    
    public func findRootVnode(launchd_proc: UInt64) -> UInt64 {
        let textvp = rk64(launchd_proc + offsets.proc.textvp)
        var nameptr = rk64(textvp + offsets.vnode.name)
        var name = [UInt8](repeating: 0, count:20)
        kread(nameptr, &name, 20)
        
        print("found vnode: ", String(cString: &name))
        
        let sbin = rk64(textvp + offsets.vnode.parent)
        nameptr = rk64(sbin + offsets.vnode.name)
        kread(nameptr, &name, 20)
        
        print("found vnode (should be sbin): ", String(cString: &name))
        
        let rootvnode = rk64(sbin + offsets.vnode.parent)
        nameptr = rk64(rootvnode + offsets.vnode.name)
        kread(nameptr, &name, 20)
        
        print("found vnode (should be root): ", String(cString: &name))
        
        let flags = rk32(rootvnode + offsets.vnode.flag)
        print(String(format:"vnode flags: 0x%x", flags))
        
        return rootvnode
    }
    
    public func findMntDevice(rootvnode: UInt64) -> UInt64 {
        let vmount = rk64(rootvnode + offsets.vnode.mount)
        var vnodelist = rk64(vmount + offsets.mount.vnodelist);
        while (vnodelist != 0){
            print("vnodelist: ", vnodelist)

            let nameptr = rk64(vnodelist + offsets.vnode.name)
            var name = [UInt8](repeating: 0, count:20)
            kread(nameptr, &name, 20)
            print("found vnode name: ", String(cString: &name))
            
            if String(cString: &name) == ".snaps" || String(cString: &name) == "System" {
                let vnodep = rk64(vnodelist + offsets.vnode.parent)
                print("vnode parent: ", vnodep, "; root vnode: ",rootvnode)
                
                var namecache = rk64(vnodelist + offsets.vnode.ncchildren)
                
                while (namecache != 0){
                    let vnodep = rk64(namecache + offsets.namecache.dvp)
                    /*let vnode = rk64(namecache + offsets.namecache.vp)
                    
                    var nameptr = rk64(vnode + offsets.vnode.name)*/
                    var nameptr = rk64(namecache + offsets.namecache.name)
                    var name = [UInt8](repeating: 0, count:20)
                    kread(nameptr, &name, 20)
                    
                    print(" found namecache: ", String(cString: &name))
                    
                    nameptr = rk64(vnodep + offsets.vnode.name)
                    kread(nameptr, &name, 20)
                    print(" found nc vnode parent: ", String(cString: &name))
                    
                    namecache = rk64(namecache + offsets.namecache.nc_child)
                }
            }
            
            
            usleep(1000)
            vnodelist = rk64(vnodelist + UInt64(0x20))
        }
        return 0
    }
}
